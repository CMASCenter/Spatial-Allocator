# Instruction to How to Run PostgreSQL/PostGIS SA Tool
# Created by UNC (11/1/2018)

Notes: This is a beta version, only 2xx, and polygon type of surrogates in 1xx, 3xx, 5xx, and 8xx can be created currently. 

0. Prerequisites
   - Install the Postgres database server and the PostGIS extension. Make sure the Postgres server is running.
      - for Mac, follow instructions https://medium.com/@Umesh_Kafle/postgresql-and-postgis-installation-in-mac-os-87fa98a6814d
   - Create a new database for the surrogates work. This document uses a database named "surrogates" by default.
     > From the psql command line, run "CREATE DATABASE surrogates;"
     > Connect to the new database with the command "\c surrogates"
     > Add the PostGIS extension to the new database: "CREATE EXTENSION postgis;"

   - For the surrogates tool to run, you will need to have a database user with all privileges on the new database.
     :The following psql commands create a new user and assign the appropriate priveleges.
     > CREATE USER <username> WITH PASSWORD '<password>';
     > GRANT ALL PRIVILEGES ON DATABASE surrogates TO <username>;
     > GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO <username>;

   - Install the Java Runtime Environment (if needed).
   - Install the tcsh package (if needed).
   - Download the Spatial Allocator package.
   - Compile the libraries required by the Spatial Allocator Package if not using default linux libraries
   - Edit and run makefile to build vector_tools: Spatial-Allocator/src/vector_64bits/Makefile
   - Download shapefile data for pg_srgtools: 
     pg_shapefiles.emiss_shp2014.tar.gz, pg_shapefiles.emiss_shp2016.tar.gz, pg_shapefiles.emiss_shp2018.tar.gz
   - Understand basic psql commands for inspecting database
   - Example psql commands provided below

   -  Start postgres
     > psql postgres
     psql (10.5)
     Type "help" for help.
   - List databases
     postgres=# \list
   - Connect to the database surrogates
     postgres=#\c surrogates 
     You are now connected to database "surrogates" as user "lizadams".
     surrogates=# 
   
   - Notice that the prompt changes from your default command prompt which we denoted above as >
   - To the database that you are connected to:
     surrogates=#

   - To quit out of the psql command line interface use the \q command
     surrogates=#\q
     

1. Update "pg_setup.csh" based on your location in your server and then "source" it (create/start the PostgreSQL Database)
   > setenv SA_HOME    /opt/srgtool
   > setenv PGHOME     /usr/bin
   > setenv PGBIN      /usr/bin
   > setenv PGDATA     /opt/srgtool/data

2. Load the output modeling projection:
   - Go to ./util directory
   - Invoke the following command to insert the output projection into your DB. Note: User can use a different number than 900921 if this number is already taken in spatial_ref_sys table in your DB. 

     > "psql -h localhost -d surrogates -U $user -f create_900921.sql"
 
   - To verify that this worked, use the following commands:
     > psql postgres
     List the databases available
     postgres=# \list
     Connect to the surrogate database
     postgres=# \c surrogates
     Show tables in the surrogate database
     surrogates=# \dt
              List of relations
 Schema |      Name       | Type  |  Owner   
--------+-----------------+-------+----------
 public | spatial_ref_sys | table | lizadams

   - Show one line from the spatial_ref_sys table
     > select * from spatial_ref_sys limit 1;     
srid | auth_name | auth_srid |                                                                                                                                                                    srtext                                                                                                                                                                    |                                           proj4text                                            
------+-----------+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------
 3819 | EPSG      |      3819 | GEOGCS["HD1909",DATUM["Hungarian_Datum_1909",SPHEROID["Bessel 1841",6377397.155,299.1528128,AUTHORITY["EPSG","7004"]],TOWGS84[595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408],AUTHORITY["EPSG","1024"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","3819"]] | +proj=longlat +ellps=bessel +towgs84=595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408 +no_defs 
(1 row)

   - Show all values where srid=900921
     > select * from spatial_ref_sys where srid=900921;

  srid  | auth_name | auth_srid |                                                                                                              srtext                                                                                                              |                                                proj4text                                                 
--------+-----------+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------
 900921 |           |           | PROJCS["Lambert_Conformal_Conic",GEOGCS["GCS_Sphere_WRF",DATUM["Sphere_WRF",SPHEROID["Sphere_WRF",6370000.0,0.0]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Lambert_Conformal_Conic_2SP"],PARAMETER+| +proj=lcc +lat_1=33 +lat_2=45 +lat_0=40 +lon_0=-97 +x_0=0 +y_0=0 +a=6370000 +b=6370000 +units=m +no_defs
        |           |           |  ["false_easting",0.0],PARAMETER["false_northing",0.0],PARAMETER["central_meridian",-97.0],PARAMETER["standard_parallel_1",33.0],PARAMETER["standard_parallel_2",45.0],PARAMETER["latitude_of_origin",40.0],UNIT["Meter",1.0"]]  | 
(1 row)

3. Load modeling grid domain:
   - Update the following settings and variables to load the modeling domain in the PostgreSQL DB using the "generate_modeling_grid.sh" script
     : Update $dbname, $schemaname, $server, $user
     : Add your own modeling domain information (see the example)
   - Invoke "generate_modeling_grid.sh"

   - List tables to see that the modeling grid domain has been added
   surrogates=# \dt

              List of relations
 Schema |      Name       | Type  |  Owner   
--------+-----------------+-------+----------
 public | spatial_ref_sys | table | lizadams
 public | us12k_444x336   | table | lizadams
(2 rows)

4. Load data and multiple weight shape files first and then transform them to the output projection (ex: 900921)
   - Update the following settings and variables in the "load_shapefile_reproject_multi.csh" script
       : Add new weight shape files and/or remove already loaded shape files by commentting out.
        (to get started comment out all source commands except for under the following section: 
         ### Load pil shapefile for surrogate 205, Potential Idling Locations
       : Set "srid" to the output projection (e.g., 900921)
       : Update $dbname, $schemaname, $server, $user
   - Invoke "load_shapefile_reproject_multi.csh"

   - List tables to see that the pil table has been added
surrogates=# \dt
              List of relations
 Schema |      Name       | Type  |  Owner   
--------+-----------------+-------+----------
 public | pil_2018_08_17  | table | lizadams
 public | spatial_ref_sys | table | lizadams
 public | us12k_444x336   | table | lizadams
(3 rows)

    - List one line from the pil table
     > select * from pil_2018_08_17 limit 1;
 ogc_fid |         name         |      address       | city  | state |  latitude   |  longitude   | site_cat | rev_truck | rev_fips |  rev_county  |   rev_state   |                             wkb_geometry                             |                             geom_900921                              
---------+----------------------+--------------------+-------+-------+-------------+--------------+----------+-----------+----------+--------------+---------------+----------------------------------------------------------------------+----------------------------------------------------------------------
      72 | Wal-Mart Supercenter | 100 Mcginnis Drive | Wayne | WV    | 38.25600224 | -82.43095079 | Retail   |         2 | 54099    | Wayne County | West Virginia | 0104000020E6100000010000000101000000104F9FB2949B54C05B4070AEC4204340 | 010400002039BF0D000100000001010000000775DFC98A3833415625B5CC0D60F6C0
(1 row)

   - Show the number of records in the pil table
     surrogates=# select count(*) from pil_2018_08_17;
 count 
-------
  7518
(1 row)

   - Update the following settings and variables in the "load_shapefile_reproject_multi.csh" script
       : Add new weight shape files and/or remove already loaded shape files by commenting it out.
        (to get started comment out all source commands except for under the following section:
         ### Load county shapefile 
       : Set "srid" to the output projection (e.g., 900921)
       : Update $dbname, $schemaname, $server, $user
       : Update location of data directory by setting $PGDATA
       : Be sure that the shapefiles are available under the $PGDATA directory
         > cd $SA_HOME
         > find . -name cb_2014_us_county_500k_Poly.shp
   - Invoke "load_shapefile_reproject_multi.csh"

   - List one line from the county shapefile table
     surrogates=#select * from cb_2014_us_county_500k_poly limit 1;
   - Show the number of records in the county shapefile table
     surrogates=#select count(*) from cb_2014_us_county_500k_poly;
 count 
-------
  3233
(1 row)


5. Create Surrogates
   - Update the following settings in the "control_variables_pg.csv" input file.
     > SRGCREATE EXECUTABLE
     > GRIDDESC  (Note: grid name can't be larger than 16 chars. ) 
     > OUTPUT_GRID_NAME
     > SURROGATE SPECIFICATION FILE
     > SHAPEFILE CATALOG
     > OUTPUT DIRECTORY
     > OUTPUT SRGDESC FILE
     > PGSCRIPT DIRECTORY
     > PG_SERVER
     > PG_USER
     > PGBIN
     > SRID_FINAL
     > DBNAME
     > COMPUTE SURROGATES,YES  (Note: set this to YES to create surrogate)
     > GAPFILL SURROGATES,NO   (Note: set this to NO since Gapfill will be done by another java tool, not by PostgreSQL/PostGIS (PG) SA tool) 

6.  Update the "surrogate_generation_pg.csv" input file to specify which surrogates to be created
    - In this example, use only the 205 surrogate, as we have only loaded shapefile data for surrogate 205 and the county boundary data

7.  Update the "surrogate_specification_pg.csv" input file
    : Note that all identifiers (including column names) that are not double-quoted are folded to lower case in PostgreSQL. 
    : Column names that were created with double-quotes and thereby retained upper-case letters
      ex:  weight_function="moves2014=4", then moves2014 is case sensitive 
           weight_shape=Hpms2016, "Hpms2016" will be recognized as hpms2016

   - Update the following settings:  (do these actually need to be modified for a quickstart case?)
     > DATA SHAPEFILE ( same name as in shapefile_catalog_pg.csv )
     > DATA ATTRIBUTE ( better use lower case )
     > WEIGHT SHAPEFILE ( same name as in shapefile_catalog_pg.csv )
     > WEIGHT ATTRIBUTE ( better use lower case )
     > WEIGHT FUNCTION  ( better use lower case )
     > FILTER FUNCTION  ( better use lower case )

8.  Update the "run_pg_srgcreate.csh" script
     : Make sure to use the PG SA tool version of Java tool (SurrogateTools-2.1.jar) that came with this PG SA tool package
     > remove comment in front of the line to source pg_setup.csh, so that the proper environment variables are used
     > Invoke the "run_pg_srgcreate.csh" run script
     > ./run_pg_srgcreate.csh


    Output:

    Finished writing srgDesc file and total surrogate file
    End Date: Thu Nov 29 13:38:14 EST 2018
    Elapsed time in minutes: 0.010066666666666666
    SUCCESS -- The Program Run Completed. See log file for details.

    - Check the outputs directory for the surrogate file
    $SA_HOME/pg_srgtools/outputs/us12k_444x336/USA_205_NOFILL.txt


9.  If there is any error, check out the PG SA templates for various types of surrogates (MultyPoly, Point, Line,,,)
    -  Go to the directory "pgscripts"
    -  These templates will be used to generate the internal PG SA run scripts to create surrogates.
   - weight shapefile cut by data(county) shape file table

10. Gap filling
   -  Once the surrogates are created by PG SA Tool, update the "control_variables_pg.csv" input file
      > COMPUTE SURROGATES,NO
      > GAPFILL SURROGATES,YES
   -  Invoke the "run_srgtool_fill.csh" run script

11. Create summary tables
   -  Invoke the "qa_srg.csh" run script
      >cd $SA_HOME/pg_srgtools/
      > ./qa_srg.csh

   -  Review the summary csv files
      > ls $SA_HOME/pg_srgtools/outputs/srgdesc_us12k_usa_*.csv
